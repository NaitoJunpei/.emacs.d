import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
import math

def HMM(spike_times) :
    spike_times = pd.Series(spike_times)
    max_value   = max(spike_times)
    min_value   = min(spike_times)
    bin_width   = (max_value - min_value) / len(spike_times)

    rate_hmm = get_hmm_ratefunc(spike_times, bin_width, max_value, min_value)

    drawHMM(opty)

def get_hmm_ratefunc(spike_times, bin_width, max_value, min_value) :
    EMloop_num = 5000
    
    mat_A      = []
    mat_A0     = [0.999, 0.001]
    mat_A1     = [0.001, 0.999]
    vec_pi     = [0.5, 0.5]
    vac_lambda = [0] * len(vec_pi)
    mean_rate  = len(spike_times) / (max_value - min_value)

    vec_lambda[0] = (mean_rate * 0.75) * bin_width
    vec_lambda[1] = (mean_rate * 1.25) * bin_width

    mat_A.extend(mat_A0)
    mat_A.extend(mat_A1)

    vec_spkt = []
    for spike in spike_times :
        vec_spkt.append(spike - min_value)

    vec_Xi = get_vec_Xi(vec_spkt, bin_width)

    E_res1    = HMM_E_step(vec_Xi, mat_A, vec_lambda, vec_pi)
    mat_Gamma = E_res1[0]
    mat_Xi    = E_res1[1]

    mat_A_old      = get_mat_copy(mat_A)
    vec_pi_old     = vec_pi[:]      # Copy of Array
    vec_lambda_old = vec_lambda[:]
    loop = 0
    flag = 0
    while(loop <= EMloop_num || flag == 0) :
        M_res = HMM_M_step(vec_Xi, mat_A, vec_lambda, vec_pi, mat_Gamma, mat_Xi)
        vec_pi_new = 
