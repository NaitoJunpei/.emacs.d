package SulabApplet1;
public class EMmethod_tdp2_1{//time-dependent-poisson(kappa=1と固定)
	
	static KalmanFilter_tdp2_1 KF;
	
	static double[] T;
	static int N;
	static double beta0 = 1;
	
	public static void Initialize (double[] t, double beta00){ //interspike intervalデータとハイパーパラメータ初期値を受け取る
		T = t;
		N = T.length;
		KF.Initialize(T); //カルマンフィルタへのデータの受け渡しと、第一回目のprediction and filteringを行う
		beta0 = beta00;
	}
		
	public static double EMmethod (){
		double beta1 = 0;//step前の値をあらわす。
		double beta2 = beta0;//step後の値をあらわす。
		
		double[][] kalman;
		
		int T0;
		for(int j=0;j<100;j++){
			beta1 = beta2;
			
			kalman = KF.KalmanFilter(beta1);
			
			//βについて最大化
			beta2 = 0;//betaはdQ/dβ=0から求める
			T0 = 0;
			for(int i=0;i<N-1;i++){
				if(T[i]>0){
					beta2 += (kalman[1][i+1]+kalman[1][i]-2*kalman[2][i]+(kalman[0][i+1]-kalman[0][i])*(kalman[0][i+1]-kalman[0][i]))/T[i];
				}else{
					T0 += 1; //interspike intervalがゼロのものがあったときの補正
				}
			}
			beta2 = (N-T0-1)/(2*beta2);
		}
		return beta2;
	}
}